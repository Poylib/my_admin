---
description: 
globs: 
alwaysApply: true
---

# Full-Stack Expert Admin Page for Personal Blog

## **Overview**
This is a full-stack web application built using **Next.js 15 App Router** for managing a personal blog. The application allows administrators to manage blog posts, tags, images, social links, likes, and comments. The backend database is structured using relational tables to handle different entities such as posts, tags, images, and interactions like likes and comments.
- use shadcn UI
## Using Shadcn with Latest Version

When using **shadcn**, make sure to use the latest version by specifying `@latest`. For example, to add a button component, run the following command:

```bash
npx shadcn@latest add button
```


## **Data Structure**

### 1. posts (게시글)
게시글의 기본 정보를 저장하는 테이블입니다.

- **id**: 게시글의 고유 ID (UUID, 기본값: `uuid_generate_v4()`, 기본 키)
- **title_ko**: 한국어 제목 (텍스트, 필수 입력)
- **title_en**: 영어 제목 (텍스트, 선택 입력)
- **content_ko**: 한국어 내용 (텍스트, 필수 입력)
- **content_en**: 영어 내용 (텍스트, 선택 입력)
- **thumbnail_url**: 썸네일 이미지 URL (텍스트, 필수 입력)
- **created_at**: 생성일시 (타임스탬프, 기본값: `now()`, 필수 입력)
- **updated_at**: 수정일시 (타임스탬프, 기본값: `now()`, 필수 입력)
- **author_id**: 작성자 ID (UUID, 외래 키: `auth.users(id)`, 필수 입력)
- **view_count**: 조회수 (정수, 기본값: 0)
- **is_published**: 발행 여부 (불리언, 기본값: true)
- **slug**: URL 슬러그 (텍스트, 필수 입력, 고유값)
- **has_translation**: 영어 번역 존재 여부 (불리언, 기본값: false)

### 2. tags (태그)
태그 정보를 저장하는 테이블입니다.

- **id**: 태그의 고유 ID (UUID, 기본값: `uuid_generate_v4()`, 기본 키)
- **name**: 태그 이름 (텍스트, 필수 입력, 고유값)
- **slug**: URL 슬러그 (텍스트, 필수 입력, 고유값)
- **created_at**: 생성일시 (타임스탬프, 기본값: `now()`, 필수 입력)

### 3. post_tags (게시글-태그 연결)
게시글과 태그의 다대다 관계를 관리하는 테이블입니다.

- **post_id**: 게시글 ID (UUID, 외래 키: `posts(id)`, 기본 키, 삭제 시 연쇄 삭제)
- **tag_id**: 태그 ID (UUID, 외래 키: `tags(id)`, 기본 키, 삭제 시 연쇄 삭제)
- **created_at**: 생성일시 (타임스탬프, 기본값: `now()`, 필수 입력)

